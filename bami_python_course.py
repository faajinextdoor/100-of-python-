# -*- coding: utf-8 -*-
"""Bami Python Course

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fzNCqwRcD46pchbS2P7MaUwU3GvUuTds

This is the Beginning of the Python
"""

import sys

sys.version

"""# DATA TYPES 

"""

# fundamebtal data types 
int, float, bool, str, tuple, list, set, dict

None #None represents an empty value

"""Every Python Object has a type

*   The type will determine the properties and behaviours if the object 
*   using the type() function we can determine  what type of object 


"""

2
type(2)

"""Variables 

* Variables hold details and they bind a value to a name 
* usernames should be descrptive
*usernames should be case_senstive

*   Python keywords cannot be used a a variable 
*   variable naming should be "camel_case"


"""

username = "Andy"
username

"""** Methods(String methods"""

'python'.upper()

'python'.isalpha()

'python 3.9'.isalpha() # this is to show is everything is alpha numeric

'python'.startswith('py') # this object is to show how the data starts with

'python'.endswith('on')

# Values subsition with the format method

'we will be using python v{}'.format(3.9)

"we be using python verison v{py_v}, pandas v{pa_v} and numpy v{nu_v}". format (py_v='3.9', pa_v = '1.03', nu_v = '1.2.1')

"""Lists are ordered sequeunces of elements """

students = ['Andrew', 'Brie', 'Cynthia']

"""
* we denote lists wit []

* each element has an idex, the first starting at 0

* we select items from the list  using the index 
"""

# selecting the last element in a list

students[-1]

# it is important to understand zero-based indexing

"""Lists vs strings"""

py = 'python'
type(py)

type(students)

"""** lists are sequences of characters, whilst lists are sequences of objects """

students[0]

py[0]

py[0:2]

students[0:2]

"""both strings and lists are ordered

*   Both lists and strings are ordered
*   lists are mutable whilst strings are immuntable
"""

py[-1] = 'N' # THIS IS BECAUSE STRINGS ARE NOT MUTABLE

students[-1]

students[-1] = "Faji"

students

"""after a string has been created the only one to change it is to re-do it """



ages =[23, 39, 12,12,1]

type(ages)
max(ages)
min(ages)

len(ages)

sorted(ages, reverse = True)

"""*** List Methods and Functions 


*   built-in functions: max, len, min, sorted 
*   methods: 


1.   *append(). to add items to a list
2.   *pop() to remove by index
3.   *remove() to remove by item
4.   str.join(list) to join all elements of an item into a string 










"""

ages.append(24)

ages

ages.pop(-1) # index based selection, remove the element and returns it

ages.remove(12) # ages removes the specfic figure we want to remove

#str.jon it so remove all the elements in a method.
students =['Andrew', 'Faji', 'Brie', 'Temi']

students.sort()
print(students)

','.join(students)
#print(type(students))

"""Tuples

Tuples are ordered and immutale continers of elements

this is donted using parenthesis but this is optional

typically used to store values that are closely related together 
"""

u_data = ( 'Ronald', 59)

u_data_2 = 'Donald', 64

type(u_data_2)

"""each elements in a tuple is immmutable
and are accessed with the zero indexing format such as []
"""

u_data_2[1]

#strings are immutable.
#sometimes we need to store values that are closely related together

#SAT score -> math, writing, reading 
sat_score = 790,780,760

sat_score # this will make it a tuple

"""Containers 111: SETS:

1.   Sets are unordered container of (only) unique values 
2.   constructed using {} and comma seperated elements 



"""

degrees = { 'Bsc', 'Ma', 'Phd'}
degrees_2 = { 'Bsc', 'Ma', 'Ma', 'Phd'}

type(degrees)

degrees_2

degrees_2[0] # selection orders do not work in sets.

"""adding and removing elements from a set"""

degrees.add('BA')

degrees

degrees.discard('MA')

degrees

degrees.intersection(degrees_2)

degrees.union(degrees_2) # same as degree_2.union(degrees)

degrees.difference(degrees_2)

degrees_2.difference(degrees)

#task: remove all the unique elememts from a list of degrees

highest_degree_earned = ['Ba', 'Ma' 'Bsc', 'MA', 'MA', 'Phd', 'Highschool', 'BA']

set(highest_degree_earned) # this works because they only store unique

highest_degree_earned_unique = list(set(highest_degree_earned))

"""**Contianers IV: Dictionaires**


*   dictionaires are mutable and unordered
*   they are built using {} and key-value pairs
*   values are accessed using [] or with.get[]
*   adding and removing elements dict[key] = value and dict.pop(key)


"""

student_scores = {'Andrew':89, 'Jessica':96, 'Brie': 79}
type(student_scores)

student_scores['Jessica'] # this returns the value of the key thats associated with the key

student_scores['Andy']

student_scores.get('Jessica')

student_scores.get('Andy') # this returns the object none

#-> tom to got a 69
student_scores['Tom'] = 69

student_scores

student_scores.pop('Andrew')

student_scores